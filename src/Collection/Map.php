<?phpdeclare(strict_types=1);namespace Fugue\Collection;use InvalidArgumentException;use IteratorAggregate;use ArrayIterator;use ArrayAccess;use Traversable;use Countable;use function array_keys;use function is_string;use function is_int;use function count;class Map implements IteratorAggregate, ArrayAccess, Countable{    /** @var mixed[] */    private $elements = [];    public function __construct(array $elements = [])    {        foreach ($elements as $key => $value) {            $this->set($key, $value);        }    }    /**     * @param string|int $key The key to check.     */    protected function checkKey($key): void    {        if (! is_string($key) && ! is_int($key)) {            throw new InvalidArgumentException(                'Key must either be a string or an integer'            );        }    }    /**     * @param mixed $value The value to check.     * @return bool        TRUE if the value is OK, FALSE otherwise.     */    protected function checkValue($value): bool    {        return true;    }    /**     * Gets the data in this Map as an array.     *     * @return array The contents of this Map as an array.     */    public function all(): array    {        return $this->elements;    }    /**     * Gets a list of all keys defined in this Map.     *     * @return string[]|int[] List of keys.     */    public function keys(): array    {        return array_keys($this->elements);    }    /**     * Determines if this Map contains the supplied key.     *     * @param string|int $key The key to test for.     * @return bool           TRUE if the key exists in this Map, FALSE otherwise.     */    public function containsKey($key): bool    {        $this->checkKey($key);        if (isset($this->elements[$key]) && $this->elements[$key] !== null) {            return true;        }        return false;    }    public function merge(Map $other): self    {        return new self(array_merge($this->all(), $other->all()));    }    /**     * Determines if this Map contains the supplied value.     *     * @param mixed $element The element to test for.     * @return bool          TRUE if the key exists in this Map, FALSE otherwise.     */    public function contains($element): bool    {        return (array_search($element, $this->elements, true) !== false);    }    public function offsetExists($offset)    {        $this->checkKey($offset);        return (isset($this->elements[$offset]));    }    public function offsetGet($offset)    {        $this->checkKey($offset);        return $this->get($offset, null);    }    public function offsetSet($offset, $value)    {        $this->checkKey($offset);        if (! $this->checkValue($value)) {            throw new InvalidArgumentException('Invalid value for ' . static::class);        }        $this->set($offset, $value);    }    public function offsetUnset($offset)    {        $this->checkKey($offset);        unset($this->elements[$offset]);    }    /**     * Gets a value.     *     * @param string|int $key     The name of the value to get.     * @param mixed      $default A default, if the value does not exist.     *     * @return mixed              The value, or the default.     */    public function get($key, $default = null)    {        $this->checkKey($key);        return $this->elements[$key] ?? $default;    }    /**     * Sets a value.     *     * @param string|int $key   The name of the value to set.     * @param mixed      $value The value to store.     */    public function set($key, $value): void    {        $this->checkKey($key);        $this->elements[$key] = $value;    }    /**     * Deletes a value.     *     * @param string|int $key The variable to delete.     */    public function delete($key): void    {        $this->checkKey($key);        unset($this->elements[$key]);    }    /**     * Clears the content of this Map.     */    public function clear(): void    {        $this->elements = [];    }    /**     * Checks to see if this Map is empty.     *     * @return bool TRUE if this Map is empty, FALSE otherwise.     */    public function isEmpty(): bool    {        return (count($this->elements) === 0);    }    public function getIterator(): Traversable    {        return new ArrayIterator($this->elements);    }    public function count(): int    {        return count($this->elements);    }    public function filter(callable $filter): self    {        return new static(            array_filter($this->elements, $filter)        );    }    /**     * @param callable $filter     * @return mixed[]     */    public function forEach(callable $filter): array    {        return array_map($filter, $this->elements);    }}